// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package datetimewithzones.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.webui.CustomJavaAction;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.TimeZone;
import java.time.Instant;
import datetimewithzones.proxies.constants.Constants;

/**
 * This action provides similar functionality to the built in formatDateTime function, but provides an additional timezone parameter, so the datetime can be returned formatted for a different timezone to the one the user is in.
 * 
 * This uses format from the DateTimeFormatter java class. https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html
 * 
 * The timezone should be from the IANA Time Zone Database (TZDB) and in the format of '{area}/{city}', e.g. 'Europe/London', or 'America/New_York'.
 */
public class formatDateTime extends CustomJavaAction<java.lang.String>
{
	private java.util.Date DateTime;
	private java.lang.String Format;
	private java.lang.String Timezone;

	public formatDateTime(IContext context, java.util.Date DateTime, java.lang.String Format, java.lang.String Timezone)
	{
		super(context);
		this.DateTime = DateTime;
		this.Format = Format;
		this.Timezone = Timezone;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		Instant instant = this.DateTime.toInstant();

		// calculate the zoneId. Try to get this from the session,
		// if that fails try to get a guest session. If we are in 
		// the system context, default to using UTC.
		ZoneId zoneId;
		if (this.Timezone == null) {
			IContext context = this.getContext();
			ISession session = context.getSession();
			if (session == null) {
				LOG.trace("No session so initializing guest session to use default timezone");
				session = Core.initializeGuestSession();
			}
			if (session.isSystemSession()) {
				LOG.trace("Running in System Session so using UTC for default timezone");
				zoneId = ZoneOffset.UTC;
			} else {
				TimeZone tz = session.getTimeZone();
				zoneId = tz.toZoneId();
				LOG.trace("Using timezone " + tz.toString());
			}
		} else {
			zoneId = ZoneId.of(this.Timezone);
		}

		// no format passed? use the a pattern similar to the default
		if (this.Format == null) {
			this.Format = "dd/MM/yyyy, HH:mm"; // e.g. "03/10/2021, 22:40"
		}
		
		DateTimeFormatter format = DateTimeFormatter.ofPattern(this.Format);
		LocalDateTime ldt = LocalDateTime.ofInstant(instant, zoneId);
        return format.format(ldt);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "formatDateTime";
	}

	// BEGIN EXTRA CODE
	public static ILogNode LOG = Core.getLogger(Constants.getLogNode());
	// END EXTRA CODE
}
